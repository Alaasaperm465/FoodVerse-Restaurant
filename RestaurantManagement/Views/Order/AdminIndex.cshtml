@model IEnumerable<RestaurantManagement.Models.Order>

@{
    ViewData["Title"] = "Orders Management";
}

<style>
    .orders-section {
        background: linear-gradient(135deg, #f9f5f0 0%, #ffffff 100%);
        min-height: calc(100vh - 80px);
        padding: 40px 0;
        margin-top: -30px;
    }

    .page-header {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        border-radius: 20px;
        padding: 30px;
        margin-bottom: 30px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        position: relative;
        overflow: hidden;
    }

        .page-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--secondary);
        }

    .header-content {
        position: relative;
        z-index: 2;
    }

    .page-title {
        font-family: 'Playfair Display', serif;
        font-weight: 700;
        font-size: 2.2rem;
        margin-bottom: 8px;
    }

    .page-subtitle {
        opacity: 0.9;
        font-size: 1.1rem;
        margin-bottom: 0;
    }

    /* Statistics Cards */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        text-align: center;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
        border: 1px solid #f0f0f0;
        cursor: pointer;
    }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }

        .stat-card.active {
            border: 2px solid var(--primary);
        }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
        font-size: 1.5rem;
    }

        .stat-icon.total {
            background: rgba(13, 110, 253, 0.1);
            color: #0d6efd;
        }

        .stat-icon.pending {
            background: rgba(255, 193, 7, 0.1);
            color: #ffc107;
        }

        .stat-icon.confirmed {
            background: rgba(25, 135, 84, 0.1);
            color: #198754;
        }

        .stat-icon.completed {
            background: rgba(111, 66, 193, 0.1);
            color: #6f42c1;
        }

        .stat-icon.cancelled {
            background: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: var(--dark);
        margin-bottom: 5px;
    }

    .stat-label {
        color: #666;
        font-weight: 500;
        font-size: 0.9rem;
    }

    /* Filters Card */
    .filters-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 25px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
        border: 1px solid #f0f0f0;
    }

    .filter-group {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        align-items: end;
    }

    .filter-item label {
        font-weight: 600;
        color: var(--dark);
        margin-bottom: 8px;
        display: block;
        font-size: 0.9rem;
    }

        .filter-item label i {
            color: var(--primary);
            margin-right: 6px;
            width: 16px;
        }

    .form-control-sm {
        border: 2px solid #e9ecef;
        border-radius: 10px;
        padding: 10px 12px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }

        .form-control-sm:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(197, 45, 47, 0.1);
        }

    .btn-reset {
        background: transparent;
        color: #6c757d;
        border: 2px solid #6c757d;
        border-radius: 10px;
        padding: 10px 20px;
        font-weight: 500;
        transition: all 0.3s ease;
        width: 100%;
    }

        .btn-reset:hover {
            background: #6c757d;
            color: white;
            transform: translateY(-2px);
        }

    .order-card {
        background: white;
        border-radius: 15px;
        margin-bottom: 20px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
        border: 1px solid #f0f0f0;
        transition: all 0.3s ease;
        overflow: hidden;
    }

        .order-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }

    .order-header {
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
        padding: 20px 25px;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: between;
        align-items: center;
        flex-wrap: wrap;
        gap: 15px;
    }

    .order-info {
        display: flex;
        align-items: center;
        gap: 15px;
        flex-wrap: wrap;
    }

    .order-id {
        font-weight: 700;
        color: var(--primary);
        font-size: 1.1rem;
    }

    .customer-info {
        color: #666;
        font-weight: 500;
    }

    .order-date {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .order-status {
        margin-left: auto;
    }

    .status-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-pending {
        background: rgba(255, 193, 7, 0.1);
        color: #ffc107;
        border: 1px solid rgba(255, 193, 7, 0.2);
    }

    .status-confirmed {
        background: rgba(25, 135, 84, 0.1);
        color: #198754;
        border: 1px solid rgba(25, 135, 84, 0.2);
    }

    .status-completed {
        background: rgba(111, 66, 193, 0.1);
        color: #6f42c1;
        border: 1px solid rgba(111, 66, 193, 0.2);
    }

    .status-cancelled {
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
        border: 1px solid rgba(220, 53, 69, 0.2);
    }

    .order-body {
        padding: 25px;
    }

    .items-table {
        width: 100%;
        margin-bottom: 20px;
    }

        .items-table th {
            background: #f8f9fa;
            padding: 12px;
            font-weight: 600;
            color: var(--dark);
            text-align: left;
            border-bottom: 2px solid #dee2e6;
        }

        .items-table td {
            padding: 12px;
            border-bottom: 1px solid #f0f0f0;
            vertical-align: top;
        }

    .item-image {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 8px;
        border: 2px solid #f0f0f0;
    }

    .item-name {
        font-weight: 600;
        color: var(--dark);
    }

    .item-price {
        color: #666;
        font-weight: 500;
    }

    .item-quantity {
        text-align: center;
        font-weight: 600;
        color: var(--primary);
    }

    .item-subtotal {
        text-align: right;
        font-weight: 700;
        color: var(--dark);
    }

    .order-summary {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
        margin-top: 20px;
    }

    .summary-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .summary-label {
        color: #666;
        font-weight: 500;
    }

    .summary-value {
        font-weight: 600;
        color: var(--dark);
    }

    .total-price {
        font-size: 1.3rem;
        color: var(--primary);
        border-top: 2px solid #dee2e6;
        padding-top: 10px;
        margin-top: 10px;
    }

    .order-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-top: 20px;
    }

    .btn-action {
        padding: 8px 16px;
        border-radius: 8px;
        font-size: 0.85rem;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.3s ease;
        border: none;
        display: inline-flex;
        align-items: center;
        gap: 6px;
    }

    .btn-confirm {
        background: linear-gradient(135deg, #198754, #157347);
        color: white;
    }

    .btn-complete {
        background: linear-gradient(135deg, #6f42c1, #5a36a8);
        color: white;
    }

    .btn-cancel {
        background: linear-gradient(135deg, #dc3545, #c82333);
        color: white;
    }

    .btn-details {
        background: linear-gradient(135deg, #0dcaf0, #0baccc);
        color: white;
    }

    .btn-action:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #666;
    }

    .empty-icon {
        font-size: 4rem;
        color: #ddd;
        margin-bottom: 20px;
        display: block;
    }

    .pagination-container {
        background: #f8f9fa;
        padding: 20px 25px;
        border-radius: 0 0 15px 15px;
        border-top: 1px solid #dee2e6;
    }

    .pagination-info {
        color: #666;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .pagination .page-item .page-link {
        border: none;
        border-radius: 8px;
        margin: 0 3px;
        color: var(--dark);
        font-weight: 500;
        transition: all 0.3s ease;
    }

    .pagination .page-item.active .page-link {
        background: var(--primary);
        color: white;
    }

    .pagination .page-item:not(.active) .page-link:hover {
        background: #e9ecef;
        color: var(--primary);
    }

    @@media (max-width: 768px) {
        .page-header {
            padding: 25px 20px;
            text-align: center;
        }

        .page-title {
            font-size: 1.8rem;
        }

        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }

        .filter-group {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .order-header {
            flex-direction: column;
            align-items: flex-start;
        }

        .order-status {
            margin-left: 0;
            margin-top: 10px;
        }

        .order-actions {
            flex-direction: column;
        }

        .btn-action {
            width: 100%;
            justify-content: center;
        }

        .items-table {
            font-size: 0.8rem;
        }
    }

    @@media (max-width: 576px) {
        .stats-grid {
            grid-template-columns: 1fr;
        }

        .stat-card {
            padding: 20px;
        }

        .order-info {
            flex-direction: column;
            align-items: flex-start;
        }
    }
</style>

<section class="orders-section">
    <div class="container">
        <div class="page-header">
            <div class="header-content">
                <h1 class="page-title">
                    <i class="fas fa-receipt me-2"></i>Orders Management
                </h1>
                <p class="page-subtitle">Track and manage all restaurant orders</p>
            </div>
        </div>

        <div class="stats-grid">
            <div class="stat-card total" data-status="all">
                <div class="stat-icon total">
                    <i class="fas fa-shopping-cart"></i>
                </div>
                <div class="stat-number" id="totalCount">@Model.Count()</div>
                <div class="stat-label">Total Orders</div>
            </div>
            <div class="stat-card pending" data-status="Pending">
                <div class="stat-icon pending">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="stat-number text-warning" id="pendingCount">@Model.Count(o => o.Status == "Pending")</div>
                <div class="stat-label">Pending</div>
            </div>
            <div class="stat-card confirmed" data-status="Confirmed">
                <div class="stat-icon confirmed">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="stat-number text-success" id="confirmedCount">@Model.Count(o => o.Status == "Confirmed")</div>
                <div class="stat-label">Confirmed</div>
            </div>
            <div class="stat-card completed" data-status="Completed">
                <div class="stat-icon completed">
                    <i class="fas fa-flag-checkered"></i>
                </div>
                <div class="stat-number text-purple" id="completedCount">@Model.Count(o => o.Status == "Completed")</div>
                <div class="stat-label">Completed</div>
            </div>
            <div class="stat-card cancelled" data-status="Cancelled">
                <div class="stat-icon cancelled">
                    <i class="fas fa-times-circle"></i>
                </div>
                <div class="stat-number text-danger" id="cancelledCount">@Model.Count(o => o.Status == "Cancelled")</div>
                <div class="stat-label">Cancelled</div>
            </div>
        </div>

        <div class="filters-card">
            <div class="filter-group">
                <div class="filter-item">
                    <label for="searchInput">
                        <i class="fas fa-search"></i>Search Orders
                    </label>
                    <input type="text" id="searchInput" class="form-control form-control-sm"
                           placeholder="Search by order ID or customer name...">
                </div>
                <div class="filter-item">
                    <label for="statusFilter">
                        <i class="fas fa-filter"></i>Status Filter
                    </label>
                    <select id="statusFilter" class="form-control form-control-sm">
                        <option value="all">All Status</option>
                        <option value="Pending">Pending</option>
                        <option value="Confirmed">Confirmed</option>
                        <option value="Completed">Completed</option>
                        <option value="Cancelled">Cancelled</option>
                    </select>
                </div>
                <div class="filter-item">
                    <label for="dateFilter">
                        <i class="fas fa-calendar"></i>Date Range
                    </label>
                    <select id="dateFilter" class="form-control form-control-sm">
                        <option value="all">All Time</option>
                        <option value="today">Today</option>
                        <option value="week">This Week</option>
                        <option value="month">This Month</option>
                    </select>
                </div>
                <div class="filter-item">
                    <label for="itemsPerPage">
                        <i class="fas fa-list"></i>Orders Per Page
                    </label>
                    <select id="itemsPerPage" class="form-control form-control-sm">
                        <option value="5">5 Orders</option>
                        <option value="10" selected>10 Orders</option>
                        <option value="25">25 Orders</option>
                        <option value="50">50 Orders</option>
                        <option value="all">All Orders</option>
                    </select>
                </div>
                <div class="filter-item">
                    <button id="resetBtn" class="btn-reset">
                        <i class="fas fa-undo"></i>Reset Filters
                    </button>
                </div>
            </div>
        </div>

        <div class="orders-container">
            @if (!Model.Any())
            {
                <div class="empty-state">
                    <i class="fas fa-receipt empty-icon"></i>
                    <h4>No Orders Found</h4>
                    <p class="text-muted">When orders are placed, they will appear here</p>
                </div>
            }
            else
            {
                <div id="ordersList">
                    @foreach (var order in Model.OrderByDescending(o => o.OrderDate))
                    {
                        <div class="order-card"
                             data-status="@order.Status.ToLower()"
                             data-orderid="@order.Id"
                             data-customer="@order.User.UserName.ToLower()"
                             data-date="@order.OrderDate.ToString("yyyy-MM-dd")">

                            <div class="order-header">
                                <div class="order-info">
                                    <div class="order-id">
                                        <i class="fas fa-hashtag me-2"></i>Order #@order.Id
                                    </div>
                                    <div class="customer-info">
                                        <i class="fas fa-user me-2"></i>@order.User.UserName
                                    </div>
                                    <div class="order-date">
                                        <i class="fas fa-clock me-2"></i>@order.OrderDate.ToString("MMM dd, yyyy HH:mm")
                                    </div>
                                </div>
                                <div class="order-status">
                                    <span class="status-badge status-@order.Status.ToLower()">
                                        <i class="fas @GetStatusIcon(order.Status) me-1"></i>
                                        @order.Status
                                    </span>
                                </div>
                            </div>

                            <div class="order-body">
                                <table class="items-table">
                                    <thead>
                                        <tr>
                                            <th width="50px"></th>
                                            <th>Item</th>
                                            <th width="100px" class="text-center">Quantity</th>
                                            <th width="100px" class="text-end">Price</th>
                                            <th width="100px" class="text-end">Subtotal</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in order.OrderItems)
                                        {
                                            <tr>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(item.MenuItem.ImageUrl))
                                                    {
                                                        <img src="@item.MenuItem.ImageUrl" class="item-image" alt="@item.MenuItem.Name" />
                                                    }
                                                    else
                                                    {
                                                        <div class="image-placeholder" style="width: 50px; height: 50px;">
                                                            <i class="fas fa-utensils"></i>
                                                        </div>
                                                    }
                                                </td>
                                                <td>
                                                    <div class="item-name">@item.MenuItem.Name</div>
                                                    <div class="item-price">$@item.UnitPrice.ToString("0.00") each</div>
                                                </td>
                                                <td class="item-quantity">@item.Quantity</td>
                                                <td class="item-price text-end">$@item.UnitPrice.ToString("0.00")</td>
                                                <td class="item-subtotal">$@((item.Quantity * item.UnitPrice).ToString("0.00"))</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                                <div class="order-summary">
                                    <div class="summary-row">
                                        <span class="summary-label">Subtotal:</span>
                                        <span class="summary-value">$@order.TotalPrice.ToString("0.00")</span>
                                    </div>
                                    <div class="summary-row">
                                        <span class="summary-label">Tax:</span>
                                        <span class="summary-value">$0.00</span>
                                    </div>
                                    <div class="summary-row">
                                        <span class="summary-label">Delivery:</span>
                                        <span class="summary-value">$0.00</span>
                                    </div>
                                    <div class="summary-row total-price">
                                        <span class="summary-label">Total:</span>
                                        <span class="summary-value">$@order.TotalPrice.ToString("0.00")</span>
                                    </div>
                                </div>

                                <div class="order-actions">
                                    @if (order.Status == "Pending")
                                    {
                                        <button class="btn-action btn-confirm" data-order-id="@order.Id">
                                            <i class="fas fa-check"></i>Confirm Order
                                        </button>
                                        <button class="btn-action btn-cancel" data-order-id="@order.Id">
                                            <i class="fas fa-times"></i>Cancel Order
                                        </button>
                                    }
                                    else if (order.Status == "Confirmed")
                                    {
                                        <button class="btn-action btn-complete" data-order-id="@order.Id">
                                            <i class="fas fa-flag-checkered"></i>Mark Complete
                                        </button>
                                    }
                                    <button class="btn-action btn-details" data-order-id="@order.Id">
                                        <i class="fas fa-eye"></i>View Details
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div id="noResults" class="empty-state" style="display: none;">
                    <i class="fas fa-search empty-icon"></i>
                    <h4>No Orders Found</h4>
                    <p class="text-muted">Try adjusting your search criteria</p>
                </div>

                <div class="pagination-container">
                    <div class="d-flex justify-content-between align-items-center flex-wrap gap-3">
                        <div class="pagination-info">
                            Showing <span class="fw-bold" id="showStart">1</span> to
                            <span class="fw-bold" id="showEnd">@Math.Min(10, Model.Count())</span> of
                            <span class="fw-bold" id="showTotal">@Model.Count()</span> orders
                        </div>
                        <nav>
                            <ul class="pagination mb-0" id="pagination"></ul>
                        </nav>
                    </div>
                </div>
            }
        </div>
    </div>
</section>

@functions {
    public string GetStatusIcon(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "fa-clock",
            "confirmed" => "fa-check-circle",
            "completed" => "fa-flag-checkered",
            "cancelled" => "fa-times-circle",
            _ => "fa-question-circle"
        };
    }
}

