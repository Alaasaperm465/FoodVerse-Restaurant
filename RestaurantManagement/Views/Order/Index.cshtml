@model IEnumerable<RestaurantManagement.Models.Order>

@{
    ViewData["Title"] = "Orders Management";
}

<style>
    .orders-management-section {
        background: linear-gradient(135deg, #f9f5f0 0%, #ffffff 100%);
        min-height: calc(100vh - 80px);
        padding: 40px 0;
        margin-top: -30px;
    }

    .page-title {
        font-family: 'Playfair Display', serif;
        font-weight: 700;
        color: var(--primary);
        text-align: center;
        margin-bottom: 40px;
        font-size: 2.5rem;
    }

    .orders-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        border: none;
        overflow: hidden;
    }

    .card-header-custom {
        background: linear-gradient(135deg, var(--primary), var(--primary-dark));
        color: white;
        padding: 25px 30px;
        border: none;
    }

        .card-header-custom h2 {
            margin: 0;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            font-size: 1.5rem;
        }

    .table-container {
        padding: 0;
    }

    .table {
        margin: 0;
        border: none;
    }

        .table thead th {
            background: #f8f9fa;
            color: var(--dark);
            font-weight: 600;
            padding: 20px 15px;
            border: none;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            text-align: center;
            vertical-align: middle;
        }

        .table tbody td {
            padding: 20px 15px;
            vertical-align: middle;
            border-color: #f8f9fa;
            text-align: center;
            transition: all 0.3s ease;
        }

        .table tbody tr {
            transition: all 0.3s ease;
        }

            .table tbody tr:hover {
                background: #f8f9fa;
                transform: translateX(5px);
            }

    .customer-name {
        font-weight: 600;
        color: var(--dark);
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .order-date {
        color: #666;
        font-weight: 500;
    }

    .total-price {
        font-weight: 700;
        color: var(--primary);
        font-size: 1.1rem;
    }

    .status-badge {
        padding: 8px 16px;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-pending {
        background: rgba(255, 193, 7, 0.1);
        color: #ffc107;
        border: 1px solid rgba(255, 193, 7, 0.2);
    }

    .status-confirmed {
        background: rgba(25, 135, 84, 0.1);
        color: #198754;
        border: 1px solid rgba(25, 135, 84, 0.2);
    }

    .status-completed {
        background: rgba(111, 66, 193, 0.1);
        color: #6f42c1;
        border: 1px solid rgba(111, 66, 193, 0.2);
    }

    .status-cancelled {
        background: rgba(220, 53, 69, 0.1);
        color: #dc3545;
        border: 1px solid rgba(220, 53, 69, 0.2);
    }

    .status-preparing {
        background: rgba(13, 110, 253, 0.1);
        color: #0d6efd;
        border: 1px solid rgba(13, 110, 253, 0.2);
    }

    .btn-details {
        background: linear-gradient(135deg, #0dcaf0, #0baccc);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        font-size: 0.85rem;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 6px;
    }

        .btn-details:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(13, 202, 240, 0.3);
            color: white;
        }

    .status-form {
        display: flex;
        gap: 10px;
        align-items: center;
        justify-content: center;
    }

    .status-select {
        border: 2px solid #e9ecef;
        border-radius: 8px;
        padding: 8px 12px;
        font-size: 0.85rem;
        transition: all 0.3s ease;
        background: #fafafa;
        min-width: 120px;
    }

        .status-select:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(197, 45, 47, 0.1);
            background: white;
        }

    .btn-save {
        background: linear-gradient(135deg, #198754, #157347);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 8px 16px;
        font-size: 0.85rem;
        font-weight: 500;
        transition: all 0.3s ease;
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }

        .btn-save:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(25, 135, 84, 0.3);
        }

    .empty-state {
        text-align: center;
        padding: 60px 20px;
        color: #666;
    }

    .empty-icon {
        font-size: 4rem;
        color: #ddd;
        margin-bottom: 20px;
        display: block;
    }

    /* Statistics Cards */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        text-align: center;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
        border: 1px solid #f0f0f0;
        cursor: pointer;
    }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 15px;
        font-size: 1.5rem;
    }

        .stat-icon.total {
            background: rgba(13, 110, 253, 0.1);
            color: #0d6efd;
        }

        .stat-icon.pending {
            background: rgba(255, 193, 7, 0.1);
            color: #ffc107;
        }

        .stat-icon.confirmed {
            background: rgba(25, 135, 84, 0.1);
            color: #198754;
        }

        .stat-icon.completed {
            background: rgba(111, 66, 193, 0.1);
            color: #6f42c1;
        }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: var(--dark);
        margin-bottom: 5px;
    }

    .stat-label {
        color: #666;
        font-weight: 500;
        font-size: 0.9rem;
    }

    /* Filters */
    .filters-card {
        background: white;
        border-radius: 15px;
        padding: 25px;
        margin-bottom: 25px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
        border: 1px solid #f0f0f0;
    }

    .filter-group {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        align-items: end;
    }

    .filter-item label {
        font-weight: 600;
        color: var(--dark);
        margin-bottom: 8px;
        display: block;
        font-size: 0.9rem;
    }

        .filter-item label i {
            color: var(--primary);
            margin-right: 6px;
            width: 16px;
        }

    .form-control-sm {
        border: 2px solid #e9ecef;
        border-radius: 10px;
        padding: 10px 12px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
    }

        .form-control-sm:focus {
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(197, 45, 47, 0.1);
        }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .page-title {
            font-size: 2rem;
        }

        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }

        .filter-group {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .table thead {
            display: none;
        }

        .table tbody tr {
            display: block;
            margin-bottom: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 15px;
        }

        .table tbody td {
            display: block;
            text-align: center;
            padding: 10px 0;
            border: none;
        }

            .table tbody td:before {
                content: attr(data-label);
                font-weight: 600;
                color: var(--dark);
                display: block;
                margin-bottom: 5px;
                font-size: 0.8rem;
                text-transform: uppercase;
            }

        .status-form {
            flex-direction: column;
            gap: 8px;
        }

        .status-select {
            width: 100%;
        }
    }

    @@media (max-width: 576px) {
        .stats-grid {
            grid-template-columns: 1fr;
        }

        .stat-card {
            padding: 20px;
        }
    }
</style>

<section class="orders-management-section">
    <div class="container">
        <h1 class="page-title">
            <i class="fas fa-receipt me-2"></i>Orders Management
        </h1>

        <!-- Statistics -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon total">
                    <i class="fas fa-shopping-cart"></i>
                </div>
                <div class="stat-number">@Model.Count()</div>
                <div class="stat-label">Total Orders</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon pending">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="stat-number">@Model.Count(o => o.Status == "Pending")</div>
                <div class="stat-label">Pending</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon confirmed">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="stat-number">@Model.Count(o => o.Status == "Confirmed")</div>
                <div class="stat-label">Confirmed</div>
            </div>
            <div class="stat-card">
                <div class="stat-icon completed">
                    <i class="fas fa-flag-checkered"></i>
                </div>
                <div class="stat-number">@Model.Count(o => o.Status == "Completed")</div>
                <div class="stat-label">Completed</div>
            </div>
        </div>

        <!-- Filters -->
        <div class="filters-card">
            <div class="filter-group">
                <div class="filter-item">
                    <label for="searchInput">
                        <i class="fas fa-search"></i>Search Orders
                    </label>
                    <input type="text" id="searchInput" class="form-control form-control-sm"
                           placeholder="Search by customer name...">
                </div>
                <div class="filter-item">
                    <label for="statusFilter">
                        <i class="fas fa-filter"></i>Status Filter
                    </label>
                    <select id="statusFilter" class="form-control form-control-sm">
                        <option value="all">All Status</option>
                        <option value="Pending">Pending</option>
                        <option value="Confirmed">Confirmed</option>
                        <option value="Completed">Completed</option>
                        <option value="Cancelled">Cancelled</option>
                    </select>
                </div>
                <div class="filter-item">
                    <label for="dateFilter">
                        <i class="fas fa-calendar"></i>Date Range
                    </label>
                    <select id="dateFilter" class="form-control form-control-sm">
                        <option value="all">All Time</option>
                        <option value="today">Today</option>
                        <option value="week">This Week</option>
                        <option value="month">This Month</option>
                    </select>
                </div>
                <div class="filter-item">
                    <button id="resetBtn" class="btn btn-outline-secondary w-100">
                        <i class="fas fa-undo"></i>Reset Filters
                    </button>
                </div>
            </div>
        </div>

        <!-- Orders Table -->
        <div class="orders-card">
            <div class="card-header-custom">
                <h2><i class="fas fa-list-check"></i> All Orders</h2>
            </div>

            <div class="table-container">
                @if (!Model.Any())
                {
                    <div class="empty-state">
                        <i class="fas fa-receipt empty-icon"></i>
                        <h4>No Orders Found</h4>
                        <p class="text-muted">When orders are placed, they will appear here</p>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th data-label="Customer">Customer</th>
                                    <th data-label="Date">Date</th>
                                    <th data-label="Total">Total</th>
                                    <th data-label="Status">Status</th>
                                    <th data-label="Actions">Actions</th>
                                    <th data-label="Update Status">Update Status</th>
                                </tr>
                            </thead>
                            <tbody id="ordersTableBody">
                                @foreach (var order in Model.OrderByDescending(o => o.OrderDate))
                                {
                                    <tr data-status="@order.Status.ToLower()"
                                        data-customer="@order.Notes?.Replace("Customer Name: ", "").ToLower()"
                                        data-date="@order.OrderDate.ToString("yyyy-MM-dd")">
                                        <td data-label="Customer">
                                            <div class="customer-name" title="@order.Notes?.Replace("Customer Name: ", "")">
                                                @order.Notes?.Replace("Customer Name: ", "")
                                            </div>
                                        </td>
                                        <td data-label="Date" class="order-date">
                                            @order.OrderDate.ToString("yyyy-MM-dd HH:mm")
                                        </td>
                                        <td data-label="Total" class="total-price">
                                            $@order.TotalPrice.ToString("0.00")
                                        </td>
                                        <td data-label="Status">
                                            <span class="status-badge status-@order.Status.ToLower()">
                                                <i class="fas @GetStatusIcon(order.Status) me-1"></i>
                                                @order.Status
                                            </span>
                                        </td>
                                        <td data-label="Actions">
                                            <a asp-action="Details" asp-route-id="@order.Id" class="btn-details">
                                                <i class="fas fa-eye"></i>Details
                                            </a>
                                        </td>
                                        <td data-label="Update Status">
                                            <form asp-action="UpdateStatus" method="post" class="status-form">
                                                <input type="hidden" name="id" value="@order.Id" />
                                                <select name="newStatus" class="status-select">
                                                    @foreach (var status in new[] { "Pending", "Confirmed", "Completed", "Cancelled" })
                                                    {
                                                        <option value="@status" selected="@(status == order.Status ? "selected" : null)">
                                                            @status
                                                        </option>
                                                    }
                                                </select>
                                                <button type="submit" class="btn-save">
                                                    <i class="fas fa-save"></i>Save
                                                </button>
                                            </form>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- No Results Message -->
                    <div id="noResults" class="empty-state" style="display: none;">
                        <i class="fas fa-search empty-icon"></i>
                        <h4>No Orders Found</h4>
                        <p class="text-muted">Try adjusting your search criteria</p>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@functions {
    public string GetStatusIcon(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "fa-clock",
            "confirmed" => "fa-check-circle",
            "completed" => "fa-flag-checkered",
            "cancelled" => "fa-times-circle",
            "preparing" => "fa-utensils",
            _ => "fa-question-circle"
        };
    }
}

@section Scripts {
    <script>
        // Filtering functionality
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            const statusFilter = document.getElementById('statusFilter');
            const dateFilter = document.getElementById('dateFilter');
            const resetBtn = document.getElementById('resetBtn');
            const ordersTableBody = document.getElementById('ordersTableBody');
            const noResults = document.getElementById('noResults');

            function applyFilters() {
                const searchTerm = searchInput.value.toLowerCase().trim();
                const status = statusFilter.value.toLowerCase();
                const dateRange = dateFilter.value;

                let visibleRows = 0;
                const rows = ordersTableBody.querySelectorAll('tr');

                rows.forEach(row => {
                    const customer = row.getAttribute('data-customer') || '';
                    const rowStatus = row.getAttribute('data-status');
                    const rowDate = row.getAttribute('data-date');

                    const matchesSearch = customer.includes(searchTerm);
                    const matchesStatus = status === 'all' || rowStatus === status;
                    const matchesDate = checkDateRange(rowDate, dateRange);

                    if (matchesSearch && matchesStatus && matchesDate) {
                        row.style.display = '';
                        visibleRows++;
                    } else {
                        row.style.display = 'none';
                    }
                });

                // Show/hide no results message
                if (visibleRows === 0) {
                    noResults.style.display = 'block';
                } else {
                    noResults.style.display = 'none';
                }
            }

            function checkDateRange(dateString, range) {
                if (range === 'all') return true;

                const rowDate = new Date(dateString);
                const today = new Date();

                switch (range) {
                    case 'today':
                        return rowDate.toDateString() === today.toDateString();
                    case 'week':
                        const weekAgo = new Date(today);
                        weekAgo.setDate(today.getDate() - 7);
                        return rowDate >= weekAgo;
                    case 'month':
                        const monthAgo = new Date(today);
                        monthAgo.setMonth(today.getMonth() - 1);
                        return rowDate >= monthAgo;
                    default:
                        return true;
                }
            }

            searchInput.addEventListener('input', applyFilters);
            statusFilter.addEventListener('change', applyFilters);
            dateFilter.addEventListener('change', applyFilters);

            resetBtn.addEventListener('click', function() {
                searchInput.value = '';
                statusFilter.value = 'all';
                dateFilter.value = 'all';
                applyFilters();
            });

            // Initialize filters
            applyFilters();
        });
    </script>
}